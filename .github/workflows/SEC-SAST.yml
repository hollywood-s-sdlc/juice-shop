name: "[SECURITY] SAST - Static Analysis"

on:
  workflow_dispatch: # Manual workflow call
  # push:
  #   branches: [ dev ]
  #   paths-ignore:
  #     - '.github/workflows/playground.yml'
  # pull_request:
  #   branches: [ dev ]
  # schedule:
  #   - cron: '0 0 * * 6' # Runs at 00:00, every Saturday.

env:
  DEBUG: false
  SECURITY-GATE-ENABLE: false
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

permissions:
  security-events: write
  id-token: write
  actions: read
  attestations: read
  checks: read
  contents: read
  deployments: read
  issues: read
  discussions: read
  packages: read
  pages: read
  pull-requests: read
  statuses: read

jobs:
  sast-health-check:
    name: Health Check SAST
    runs-on: ubuntu-latest
    steps:      
      - name: "[RESULT] Verify if CodeQL is available"
        run: |
          # CodeQL Healthcheck
          GREEN='\033[0;32m'
          RED='\033[0;31m'
          NC='\033[0m'

          echo "   _____ ___   ___________    ________          __     ____    __    _ ";
          echo "  / ___//   | / ___/_  __/  _/_/ ____/___  ____/ /__  / __ \  / /   | |";
          echo "  \__ \/ /| | \__ \ / /    / // /   / __ \/ __  / _ \/ / / / / /    / /";
          echo " ___/ / ___ |___/ // /    / // /___/ /_/ / /_/ /  __/ /_/ / / /___ / / ";
          echo "/____/_/  |_/____//_/    / / \____/\____/\__,_/\___/\___\_\/_____//_/  ";
          echo "                         |_|                                    /_/    ";

          # Call GH API
          response=$(gh api -i "/repos/${{ github.repository }}/code-scanning/codeql/databases" -H "Accept: application/vnd.github+json")
          if [[ "${{ env.DEBUG }}" == 'true' ]]; then
            echo "[DEBUG] $response"
          fi

          # Grab response body
          BODY=$(echo "$response" | tail -n1)

          # Parse response header
          shopt -s extglob # Required to trim whitespace
          while IFS=':' read key value; do
              # trim whitespace in "value"
              value=${value##+([[:space:]])}; value=${value%%+([[:space:]])}

              case "$key" in
                  Server) SERVER="$value"
                    ;;
                  HTTP*) read PROTO STATUS MSG <<< "$key{$value:+:$value}"
                    ;;
              esac
          done < <(echo "$response" | sed '$d')

          echo "--------------------"
          echo "Response Code"

          if [[ "${{ env.DEBUG }}" == 'true' ]]; then
            echo "[DEBUG] $STATUS"
          fi

          if [[ "$STATUS" -ne 200 ]]; then
            echo -e "${RED}Error: ${NC}CodeQL is not active or not configured!"
            exit 1
          else
            echo -e "${GREEN}PASSED\n"
          fi

          #response=$(gh api "/repos/${{ github.repository }}/code-scanning/codeql/databases" -H "Accept: application/vnd.github+json")

          echo "--------------------"
          echo "JSON Valid Format"

          first_language=$(echo $BODY | jq -r '.[1].language')
          if [[ "${{ env.DEBUG }}" == 'true' ]]; then
            echo "[DEBUG] $first_language"
          fi

          if [[ "$first_language" == "null" ]]; then
            echo -e "${RED}Error: ${NC}CodeQL returned an invalid format! Check permissions."
            exit 1
          else
            echo -e "${GREEN}PASSED\n"
          fi

          echo "--------------------"
          echo "Database Exists"

          quantity=$(echo $BODY | jq 'length')
          if [[ "${{ env.DEBUG }}" == 'true' ]]; then
            echo "[DEBUG] $quantity"
          fi

          if [[ "$quantity" -eq 0 ]]; then
            echo -e "${RED}Error: ${NC}No CodeQL databases found!"
            exit 1
          else
            echo -e "${GREEN}PASSED\n"
          fi

          echo "--------------------"
          echo "Health check successful: CodeQL databases are present."
          echo -e "${GREEN}SUCCESS"


  sast-analyze:
    name: Analyze (${{ matrix.language }})
    needs: sast-health-check
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: actions
          build-mode: none
        - language: javascript-typescript
          build-mode: none
        - language: python
          build-mode: none
        # CodeQL supports the following values keywords for 'language': 'actions', 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Add any setup steps before running the `github/codeql-action/init` action.
    # This includes steps like installing compilers or runtimes (`actions/setup-node`
    # or others). This is typically only required for manual builds.
    # - name: Setup runtime (example)
    #   uses: actions/setup-example@v1

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    # If the analyze step fails for one of the languages you are analyzing with
    # "We were unable to automatically build your code", modify the matrix above
    # to set the build mode to "manual" for that language. Then modify this step
    # to build your code.
    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

        
  sast-summarize-results:
    name: List Vulnerabilities
    needs: sast-analyze
    runs-on: ubuntu-latest
    steps:    
    - name: "[RESULT] Vulnerabilities Summary"
      run: |
        # Vulnerabilities Summary

        echo "   _____ ___   ___________    ________          __     ____    __    _ ";
        echo "  / ___//   | / ___/_  __/  _/_/ ____/___  ____/ /__  / __ \  / /   | |";
        echo "  \__ \/ /| | \__ \ / /    / // /   / __ \/ __  / _ \/ / / / / /    / /";
        echo " ___/ / ___ |___/ // /    / // /___/ /_/ / /_/ /  __/ /_/ / / /___ / / ";
        echo "/____/_/  |_/____//_/    / / \____/\____/\__,_/\___/\___\_\/_____//_/  ";
        echo "                         |_|                                    /_/    ";

        echo "# Vulnerabilites Summary" >> $GITHUB_STEP_SUMMARY

        severity_list=( critical high medium low warning note error )
        for severity in "${severity_list[@]}"; do
          response=$(gh api -H "Accept: application/vnd.github+json" \
            "/repos/${{ github.repository }}/code-scanning/alerts?tool_name=CodeQL&state=open&severity=$severity&direction=asc"
          )
          if [[ "${{ env.DEBUG }}" == 'true' ]]; then
            echo "[DEBUG] $response"
          fi

          echo "--------------------"
          echo "${severity^}"
          
          quantity=$(echo $response | jq 'length')

          echo "TOTAL: $quantity $severity alerts."
          echo "## ${severity^} ($quantity alerts)" >> $GITHUB_STEP_SUMMARY

          if [[ "$quantity" -gt 0 ]]; then
            echo "| Alert | Description | Location | Links |" >> $GITHUB_STEP_SUMMARY
            echo "| ----- | ----------- | -------- | ----- |" >> $GITHUB_STEP_SUMMARY

            i=0
            while item=$(echo "$response" | jq -c ".[$i]"); do
              if [[ "$item" == "null" ]]; then
                break
              fi

              alert_url=$(echo "$item" | jq -r '.html_url')
              alert_number=$(echo "$item" | jq -r '.number')
              description=$(echo "$item" | jq -r '.rule.description')
              location_path=$(echo "$item" | jq -r '.most_recent_instance.location.path')
              location_line=$(echo "$item" | jq -r '.most_recent_instance.location.start_line')

              echo "$alert_number | $description | $alert_url"
              echo "| $alert_number | $description | $location_path:$location_line | [Vulnerability Details]($alert_url) \| [Source Code](https://github.com/${{ github.repository }}/blob/main/${location_path}) |" >> $GITHUB_STEP_SUMMARY

              i=$((i+1))
            done
          fi
          
        done


  sast-security-gate:
    name: Security Gate
    needs: sast-analyze
    runs-on: ubuntu-latest
    steps:
      - name: "[RESULT] Security Gate"
        run: |
          # Security Gate
          GREEN='\033[0;32m'
          ORANGE='\033[0;33m'
          RED='\033[0;31m'
          NC='\033[0m'

          echo "   _____ ___   ___________    ________          __     ____    __    _ ";
          echo "  / ___//   | / ___/_  __/  _/_/ ____/___  ____/ /__  / __ \  / /   | |";
          echo "  \__ \/ /| | \__ \ / /    / // /   / __ \/ __  / _ \/ / / / / /    / /";
          echo " ___/ / ___ |___/ // /    / // /___/ /_/ / /_/ /  __/ /_/ / / /___ / / ";
          echo "/____/_/  |_/____//_/    / / \____/\____/\__,_/\___/\___\_\/_____//_/  ";
          echo "                         |_|                                    /_/    ";

          # Check open alerts grouped by severity
          severity_list=( critical high )

          for severity in "${severity_list[@]}"; do
            response=$(gh api -H "Accept: application/vnd.github+json" \
              "/repos/${{ github.repository }}/code-scanning/alerts?tool_name=CodeQL&state=open&severity=$severity"
            )
            if [[ "${{ env.DEBUG }}" == 'true' ]]; then
              echo "[DEBUG] $response"
            fi

            quantity=$(echo $response | jq 'length')
            if [[ $quantity -gt 0 ]]; then
              echo -e "${RED}[ERROR] ${NC}Found open alerts of $severity severity."
              if [[ "${{ env.SECURITY-GATE-ENABLE }}" == 'true' ]]; then
                exit 1
              else
                echo -e "${ORANGE}[WARN] ${NC}SECURITY-GATE-ENABLE set to false, proceeding."
              fi
              
            else
              echo  -e "${GREEN}${severity^^} PASSED\n"
            fi
          done
